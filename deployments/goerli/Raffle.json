{
  "address": "0x33F5587795968a807620c8eA8531Bca3272B3F21",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__IsNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__Transfer_Failed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__notEnough_Ether",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "geVrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallBackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49a945f99e39bf80eec8efd36e0179e21b640678f6ef3976d75be34ebef2dbf4",
  "receipt": {
    "to": null,
    "from": "0x0F95975c0442963642852083131155eB592eE530",
    "contractAddress": "0x33F5587795968a807620c8eA8531Bca3272B3F21",
    "transactionIndex": 75,
    "gasUsed": "1297748",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd47e473a06c5040b2ad33f6d4d4431955b991b2cf8b070cba682b812cc91c0fc",
    "transactionHash": "0x49a945f99e39bf80eec8efd36e0179e21b640678f6ef3976d75be34ebef2dbf4",
    "logs": [],
    "blockNumber": 8060984,
    "cumulativeGasUsed": "10958281",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "7129",
    "100000",
    "2"
  ],
  "numDeployments": 6,
  "solcInputHash": "34f92b5434b77453d2710d68338b121d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__IsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__Transfer_Failed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__notEnough_Ether\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geVrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallBackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\nerror Raffle__notEnough_Ether();\\nerror Raffle__Transfer_Failed();\\nerror Raffle__IsNotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 balance,\\n    uint256 players,\\n    uint256 raffleState\\n);\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Type Declarations */\\n\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* State Variables */\\n\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callBackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n    RaffleState private s_raffleState;\\n\\n    /* Lottery Variables */\\n    address private s_recentWinner;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    /* Events */\\n\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callBackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callBackGasLimit = callBackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__notEnough_Ether();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__IsNotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upKeepNeeded,\\n            bytes memory /*performData */\\n        )\\n    {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n        upKeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upKeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callBackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__Transfer_Failed();\\n        }\\n        emit WinnerPicked(s_recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRandomWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumOfWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function geVrfCoordinator()\\n        public\\n        view\\n        returns (VRFCoordinatorV2Interface)\\n    {\\n        return i_vrfCoordinator;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n\\n    function getSubscriptionId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getCallBackGasLimit() public view returns (uint32) {\\n        return i_callBackGasLimit;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0a4309cfffb8cafc585fa6f552582d239471c4cebd64f4d7234c8390750d8e3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001a3838038062001a3883398181016040528101906200003891906200028d565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160006101000a81548160ff021916908360018111156200010d576200010c62000329565b5b021790555080610140818152505050505050505062000358565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000159826200012c565b9050919050565b6200016b816200014c565b81146200017757600080fd5b50565b6000815190506200018b8162000160565b92915050565b6000819050919050565b620001a68162000191565b8114620001b257600080fd5b50565b600081519050620001c6816200019b565b92915050565b6000819050919050565b620001e181620001cc565b8114620001ed57600080fd5b50565b6000815190506200020181620001d6565b92915050565b600067ffffffffffffffff82169050919050565b620002268162000207565b81146200023257600080fd5b50565b60008151905062000246816200021b565b92915050565b600063ffffffff82169050919050565b62000267816200024c565b81146200027357600080fd5b50565b60008151905062000287816200025c565b92915050565b60008060008060008060c08789031215620002ad57620002ac62000127565b5b6000620002bd89828a016200017a565b9650506020620002d089828a01620001b5565b9550506040620002e389828a01620001f0565b9450506060620002f689828a0162000235565b93505060806200030989828a0162000276565b92505060a06200031c89828a01620001b5565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611654620003e4600039600081816108cd015261093b01526000818161061a015261077501526000818161075201526109a401526000818161073101526109630152600081816106f501526108660152600081816103ac01526104a90152600081816103e9015261043d01526116546000f3fe6080604052600436106100f35760003560e01c806368a73f921161008a578063d5eceb7111610059578063d5eceb71146102ea578063da235b2214610315578063de3d9fb714610340578063e55ae4e81461036b576100f3565b806368a73f921461022b5780636e04ff0d1461025657806391ad27b414610294578063c19dd76b146102bf576100f3565b80633cdb9361116100c65780633cdb9361146101815780634585e33b146101ac578063565429de146101d55780636694f1a514610200576100f3565b806309bc33a7146100f8578063115cbaf5146101235780631fe543e31461014e5780632cfcc53914610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610d13565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610da5565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610f59565b6103e7565b005b61017f6104a7565b005b34801561018d57600080fd5b50610196610616565b6040516101a39190610fd4565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce919061104a565b61063e565b005b3480156101e157600080fd5b506101ea61082e565b6040516101f79190610d13565b60405180910390f35b34801561020c57600080fd5b5061021561083a565b60405161022291906110d8565b60405180910390f35b34801561023757600080fd5b50610240610862565b60405161024d9190611152565b60405180910390f35b34801561026257600080fd5b5061027d60048036038101906102789190611222565b61088a565b60405161028b929190611305565b60405180910390f35b3480156102a057600080fd5b506102a9610937565b6040516102b69190610d13565b60405180910390f35b3480156102cb57600080fd5b506102d461095f565b6040516102e1919061134e565b60405180910390f35b3480156102f657600080fd5b506102ff610987565b60405161030c9190610d13565b60405180910390f35b34801561032157600080fd5b5061032a610996565b6040516103379190610d13565b60405180910390f35b34801561034c57600080fd5b506103556109a0565b604051610362919061138c565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d91906113a7565b6109c8565b60405161039f91906110d8565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104909291906113d4565b60405180910390fd5b6104a38282610a0f565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610501576040517ff1b7bf6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561051557610514610d2e565b5b600160009054906101000a900460ff16600181111561053757610536610d2e565b5b1461056e576040517f9fea621b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006106586040518060200160405280600081525061088a565b509050806106c75747600080549050600160009054906101000a900460ff16600181111561068957610688610d2e565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106be939291906113fd565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156106ec576106eb610d2e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107b6959493929190611451565b6020604051808303816000875af11580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f991906114b9565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b60008080549050905090565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060606000600160009054906101000a900460ff1660018111156108b2576108b1610d2e565b5b600060018111156108c6576108c5610d2e565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108fa9190611515565b1190506000806000805490501190506000804711905083801561091a5750825b80156109235750815b801561092c5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600163ffffffff16905090565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109dd576109dc611549565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610a2a57610a29611549565b5b6020026020010151610a3c91906115a7565b90506000808281548110610a5357610a52611549565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff02191690836001811115610ae657610ae5610d2e565b5b0217905550600067ffffffffffffffff811115610b0657610b05610e16565b5b604051908082528060200260200182016040528015610b345781602001602082028036833780820191505090505b5060009080519060200190610b4a929190610c53565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b7890611609565b60006040518083038185875af1925050503d8060008114610bb5576040519150601f19603f3d011682016040523d82523d6000602084013e610bba565b606091505b5050905080610bf5576040517f9f697f2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610c4491906110d8565b60405180910390a15050505050565b828054828255906000526020600020908101928215610ccc579160200282015b82811115610ccb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c73565b5b509050610cd99190610cdd565b5090565b5b80821115610cf6576000816000905550600101610cde565b5090565b6000819050919050565b610d0d81610cfa565b82525050565b6000602082019050610d286000830184610d04565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d6e57610d6d610d2e565b5b50565b6000819050610d7f82610d5d565b919050565b6000610d8f82610d71565b9050919050565b610d9f81610d84565b82525050565b6000602082019050610dba6000830184610d96565b92915050565b6000604051905090565b600080fd5b600080fd5b610ddd81610cfa565b8114610de857600080fd5b50565b600081359050610dfa81610dd4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4e82610e05565b810181811067ffffffffffffffff82111715610e6d57610e6c610e16565b5b80604052505050565b6000610e80610dc0565b9050610e8c8282610e45565b919050565b600067ffffffffffffffff821115610eac57610eab610e16565b5b602082029050602081019050919050565b600080fd5b6000610ed5610ed084610e91565b610e76565b90508083825260208201905060208402830185811115610ef857610ef7610ebd565b5b835b81811015610f215780610f0d8882610deb565b845260208401935050602081019050610efa565b5050509392505050565b600082601f830112610f4057610f3f610e00565b5b8135610f50848260208601610ec2565b91505092915050565b60008060408385031215610f7057610f6f610dca565b5b6000610f7e85828601610deb565b925050602083013567ffffffffffffffff811115610f9f57610f9e610dcf565b5b610fab85828601610f2b565b9150509250929050565b600063ffffffff82169050919050565b610fce81610fb5565b82525050565b6000602082019050610fe96000830184610fc5565b92915050565b600080fd5b60008083601f84011261100a57611009610e00565b5b8235905067ffffffffffffffff81111561102757611026610fef565b5b60208301915083600182028301111561104357611042610ebd565b5b9250929050565b6000806020838503121561106157611060610dca565b5b600083013567ffffffffffffffff81111561107f5761107e610dcf565b5b61108b85828601610ff4565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110c282611097565b9050919050565b6110d2816110b7565b82525050565b60006020820190506110ed60008301846110c9565b92915050565b6000819050919050565b600061111861111361110e84611097565b6110f3565b611097565b9050919050565b600061112a826110fd565b9050919050565b600061113c8261111f565b9050919050565b61114c81611131565b82525050565b60006020820190506111676000830184611143565b92915050565b600080fd5b600067ffffffffffffffff82111561118d5761118c610e16565b5b61119682610e05565b9050602081019050919050565b82818337600083830152505050565b60006111c56111c084611172565b610e76565b9050828152602081018484840111156111e1576111e061116d565b5b6111ec8482856111a3565b509392505050565b600082601f83011261120957611208610e00565b5b81356112198482602086016111b2565b91505092915050565b60006020828403121561123857611237610dca565b5b600082013567ffffffffffffffff81111561125657611255610dcf565b5b611262848285016111f4565b91505092915050565b60008115159050919050565b6112808161126b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112c05780820151818401526020810190506112a5565b60008484015250505050565b60006112d782611286565b6112e18185611291565b93506112f18185602086016112a2565b6112fa81610e05565b840191505092915050565b600060408201905061131a6000830185611277565b818103602083015261132c81846112cc565b90509392505050565b6000819050919050565b61134881611335565b82525050565b6000602082019050611363600083018461133f565b92915050565b600067ffffffffffffffff82169050919050565b61138681611369565b82525050565b60006020820190506113a1600083018461137d565b92915050565b6000602082840312156113bd576113bc610dca565b5b60006113cb84828501610deb565b91505092915050565b60006040820190506113e960008301856110c9565b6113f660208301846110c9565b9392505050565b60006060820190506114126000830186610d04565b61141f6020830185610d04565b61142c6040830184610d04565b949350505050565b600061ffff82169050919050565b61144b81611434565b82525050565b600060a082019050611466600083018861133f565b611473602083018761137d565b6114806040830186611442565b61148d6060830185610fc5565b61149a6080830184610fc5565b9695505050505050565b6000815190506114b381610dd4565b92915050565b6000602082840312156114cf576114ce610dca565b5b60006114dd848285016114a4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061152082610cfa565b915061152b83610cfa565b9250828203905081811115611543576115426114e6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115b282610cfa565b91506115bd83610cfa565b9250826115cd576115cc611578565b5b828206905092915050565b600081905092915050565b50565b60006115f36000836115d8565b91506115fe826115e3565b600082019050919050565b6000611614826115e6565b915081905091905056fea2646970667358221220771165750b57c4a6fa0998089de9a0b08c83c92c3ba1e1bf061c1f4f3453e61b64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806368a73f921161008a578063d5eceb7111610059578063d5eceb71146102ea578063da235b2214610315578063de3d9fb714610340578063e55ae4e81461036b576100f3565b806368a73f921461022b5780636e04ff0d1461025657806391ad27b414610294578063c19dd76b146102bf576100f3565b80633cdb9361116100c65780633cdb9361146101815780634585e33b146101ac578063565429de146101d55780636694f1a514610200576100f3565b806309bc33a7146100f8578063115cbaf5146101235780631fe543e31461014e5780632cfcc53914610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610d13565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610da5565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610f59565b6103e7565b005b61017f6104a7565b005b34801561018d57600080fd5b50610196610616565b6040516101a39190610fd4565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce919061104a565b61063e565b005b3480156101e157600080fd5b506101ea61082e565b6040516101f79190610d13565b60405180910390f35b34801561020c57600080fd5b5061021561083a565b60405161022291906110d8565b60405180910390f35b34801561023757600080fd5b50610240610862565b60405161024d9190611152565b60405180910390f35b34801561026257600080fd5b5061027d60048036038101906102789190611222565b61088a565b60405161028b929190611305565b60405180910390f35b3480156102a057600080fd5b506102a9610937565b6040516102b69190610d13565b60405180910390f35b3480156102cb57600080fd5b506102d461095f565b6040516102e1919061134e565b60405180910390f35b3480156102f657600080fd5b506102ff610987565b60405161030c9190610d13565b60405180910390f35b34801561032157600080fd5b5061032a610996565b6040516103379190610d13565b60405180910390f35b34801561034c57600080fd5b506103556109a0565b604051610362919061138c565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d91906113a7565b6109c8565b60405161039f91906110d8565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104909291906113d4565b60405180910390fd5b6104a38282610a0f565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610501576040517ff1b7bf6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561051557610514610d2e565b5b600160009054906101000a900460ff16600181111561053757610536610d2e565b5b1461056e576040517f9fea621b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006106586040518060200160405280600081525061088a565b509050806106c75747600080549050600160009054906101000a900460ff16600181111561068957610688610d2e565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106be939291906113fd565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156106ec576106eb610d2e565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016107b6959493929190611451565b6020604051808303816000875af11580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f991906114b9565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b60008080549050905090565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060606000600160009054906101000a900460ff1660018111156108b2576108b1610d2e565b5b600060018111156108c6576108c5610d2e565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108fa9190611515565b1190506000806000805490501190506000804711905083801561091a5750825b80156109235750815b801561092c5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600163ffffffff16905090565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106109dd576109dc611549565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808054905082600081518110610a2a57610a29611549565b5b6020026020010151610a3c91906115a7565b90506000808281548110610a5357610a52611549565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff02191690836001811115610ae657610ae5610d2e565b5b0217905550600067ffffffffffffffff811115610b0657610b05610e16565b5b604051908082528060200260200182016040528015610b345781602001602082028036833780820191505090505b5060009080519060200190610b4a929190610c53565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b7890611609565b60006040518083038185875af1925050503d8060008114610bb5576040519150601f19603f3d011682016040523d82523d6000602084013e610bba565b606091505b5050905080610bf5576040517f9f697f2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610c4491906110d8565b60405180910390a15050505050565b828054828255906000526020600020908101928215610ccc579160200282015b82811115610ccb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c73565b5b509050610cd99190610cdd565b5090565b5b80821115610cf6576000816000905550600101610cde565b5090565b6000819050919050565b610d0d81610cfa565b82525050565b6000602082019050610d286000830184610d04565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d6e57610d6d610d2e565b5b50565b6000819050610d7f82610d5d565b919050565b6000610d8f82610d71565b9050919050565b610d9f81610d84565b82525050565b6000602082019050610dba6000830184610d96565b92915050565b6000604051905090565b600080fd5b600080fd5b610ddd81610cfa565b8114610de857600080fd5b50565b600081359050610dfa81610dd4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e4e82610e05565b810181811067ffffffffffffffff82111715610e6d57610e6c610e16565b5b80604052505050565b6000610e80610dc0565b9050610e8c8282610e45565b919050565b600067ffffffffffffffff821115610eac57610eab610e16565b5b602082029050602081019050919050565b600080fd5b6000610ed5610ed084610e91565b610e76565b90508083825260208201905060208402830185811115610ef857610ef7610ebd565b5b835b81811015610f215780610f0d8882610deb565b845260208401935050602081019050610efa565b5050509392505050565b600082601f830112610f4057610f3f610e00565b5b8135610f50848260208601610ec2565b91505092915050565b60008060408385031215610f7057610f6f610dca565b5b6000610f7e85828601610deb565b925050602083013567ffffffffffffffff811115610f9f57610f9e610dcf565b5b610fab85828601610f2b565b9150509250929050565b600063ffffffff82169050919050565b610fce81610fb5565b82525050565b6000602082019050610fe96000830184610fc5565b92915050565b600080fd5b60008083601f84011261100a57611009610e00565b5b8235905067ffffffffffffffff81111561102757611026610fef565b5b60208301915083600182028301111561104357611042610ebd565b5b9250929050565b6000806020838503121561106157611060610dca565b5b600083013567ffffffffffffffff81111561107f5761107e610dcf565b5b61108b85828601610ff4565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110c282611097565b9050919050565b6110d2816110b7565b82525050565b60006020820190506110ed60008301846110c9565b92915050565b6000819050919050565b600061111861111361110e84611097565b6110f3565b611097565b9050919050565b600061112a826110fd565b9050919050565b600061113c8261111f565b9050919050565b61114c81611131565b82525050565b60006020820190506111676000830184611143565b92915050565b600080fd5b600067ffffffffffffffff82111561118d5761118c610e16565b5b61119682610e05565b9050602081019050919050565b82818337600083830152505050565b60006111c56111c084611172565b610e76565b9050828152602081018484840111156111e1576111e061116d565b5b6111ec8482856111a3565b509392505050565b600082601f83011261120957611208610e00565b5b81356112198482602086016111b2565b91505092915050565b60006020828403121561123857611237610dca565b5b600082013567ffffffffffffffff81111561125657611255610dcf565b5b611262848285016111f4565b91505092915050565b60008115159050919050565b6112808161126b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112c05780820151818401526020810190506112a5565b60008484015250505050565b60006112d782611286565b6112e18185611291565b93506112f18185602086016112a2565b6112fa81610e05565b840191505092915050565b600060408201905061131a6000830185611277565b818103602083015261132c81846112cc565b90509392505050565b6000819050919050565b61134881611335565b82525050565b6000602082019050611363600083018461133f565b92915050565b600067ffffffffffffffff82169050919050565b61138681611369565b82525050565b60006020820190506113a1600083018461137d565b92915050565b6000602082840312156113bd576113bc610dca565b5b60006113cb84828501610deb565b91505092915050565b60006040820190506113e960008301856110c9565b6113f660208301846110c9565b9392505050565b60006060820190506114126000830186610d04565b61141f6020830185610d04565b61142c6040830184610d04565b949350505050565b600061ffff82169050919050565b61144b81611434565b82525050565b600060a082019050611466600083018861133f565b611473602083018761137d565b6114806040830186611442565b61148d6060830185610fc5565b61149a6080830184610fc5565b9695505050505050565b6000815190506114b381610dd4565b92915050565b6000602082840312156114cf576114ce610dca565b5b60006114dd848285016114a4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061152082610cfa565b915061152b83610cfa565b9250828203905081811115611543576115426114e6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006115b282610cfa565b91506115bd83610cfa565b9250826115cd576115cc611578565b5b828206905092915050565b600081905092915050565b50565b60006115f36000836115d8565b91506115fe826115e3565b600082019050919050565b6000611614826115e6565b915081905091905056fea2646970667358221220771165750b57c4a6fa0998089de9a0b08c83c92c3ba1e1bf061c1f4f3453e61b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 242,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 260,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(RaffleState)237"
      },
      {
        "astId": 262,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 264,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)237": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}